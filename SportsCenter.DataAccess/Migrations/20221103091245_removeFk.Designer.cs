// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsCenter.DataAccess;

#nullable disable

namespace SportsCenter.DataAccess.Migrations
{
    [DbContext(typeof(SportsCenterDbContext))]
    [Migration("20221103091245_removeFk")]
    partial class removeFk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.InviteCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InviteCategory");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location_Id");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_LocationBranch_Category_Id");

                    b.HasIndex(new[] { "LocationId" }, "IX_LocationBranch_Location_Id");

                    b.ToTable("LocationBranch");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location_Id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LocationId" }, "IX_LocationImage_Location_Id");

                    b.ToTable("LocationImage");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationBranchId")
                        .HasColumnType("int")
                        .HasColumnName("LocationBranch_Id");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_Id");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LocationBranchId" }, "IX_LocationOrder_LocationBranch_Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_LocationOrder_Member_Id");

                    b.ToTable("LocationOrder");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Member_Id")
                        .HasColumnType("int");

                    b.Property<int>("Post_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Member_Id");

                    b.HasIndex("Post_Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InviteCategory_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Member_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InviteCategory_Id");

                    b.HasIndex("Member_Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Products", b =>
                {
                    b.Property<int>("ProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Products_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductsId"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("Item_Id");

                    b.Property<DateTime>("ProductsDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Products_DateTime");

                    b.Property<string>("ProductsImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Products_ImagePath");

                    b.Property<int>("ProductsInventory")
                        .HasColumnType("int")
                        .HasColumnName("Products_Inventory");

                    b.Property<string>("ProductsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Products_Name");

                    b.Property<int>("ProductsPrice")
                        .HasColumnType("int")
                        .HasColumnName("Products_Price");

                    b.HasKey("ProductsId");

                    b.HasIndex(new[] { "ItemId" }, "IX_Products_Item_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_Id");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int")
                        .HasColumnName("Products_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_ProductsCart_Member_Id");

                    b.HasIndex(new[] { "ProductsId" }, "IX_ProductsCart_Products_Id");

                    b.ToTable("ProductsCart");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MemberAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Member_Address");

                    b.Property<string>("MemberCellphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Member_Cellphone");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_Id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_ProductsOrder_Member_Id");

                    b.ToTable("ProductsOrder");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_ID");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_Name");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsPrice")
                        .HasColumnType("int")
                        .HasColumnName("Products_Price");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductOrderId" }, "IX_ProductsOrderDetail_ProductOrderId");

                    b.ToTable("ProductsOrderDetail");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationBranch", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.Category", "Category")
                        .WithMany("LocationBranch")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsCenter.DataAccess.Entity.Location", "Location")
                        .WithMany("LocationBranch")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationImage", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.Location", "Location")
                        .WithMany("LocationImage")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationOrder", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.LocationBranch", "LocationBranch")
                        .WithMany("LocationOrder")
                        .HasForeignKey("LocationBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsCenter.DataAccess.Entity.Member", "Member")
                        .WithMany("LocationOrder")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationBranch");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Message", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.Member", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("Member_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsCenter.DataAccess.Entity.Post", "Post")
                        .WithMany("Message")
                        .HasForeignKey("Post_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Post", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.InviteCategory", "InviteCategory")
                        .WithMany("Posts")
                        .HasForeignKey("InviteCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsCenter.DataAccess.Entity.Member", "Member")
                        .WithMany("Post")
                        .HasForeignKey("Member_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InviteCategory");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Products", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.Item", "Item")
                        .WithMany("Products")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsCart", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.Member", "Member")
                        .WithMany("ProductsCart")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsCenter.DataAccess.Entity.Products", "Products")
                        .WithMany("ProductsCart")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsOrder", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.Member", "Member")
                        .WithMany("ProductsOrder")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsOrderDetail", b =>
                {
                    b.HasOne("SportsCenter.DataAccess.Entity.ProductsOrder", "ProductOrder")
                        .WithMany("ProductsOrderDetail")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Category", b =>
                {
                    b.Navigation("LocationBranch");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.InviteCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Item", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Location", b =>
                {
                    b.Navigation("LocationBranch");

                    b.Navigation("LocationImage");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.LocationBranch", b =>
                {
                    b.Navigation("LocationOrder");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Member", b =>
                {
                    b.Navigation("LocationOrder");

                    b.Navigation("Messages");

                    b.Navigation("Post");

                    b.Navigation("ProductsCart");

                    b.Navigation("ProductsOrder");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Post", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.Products", b =>
                {
                    b.Navigation("ProductsCart");
                });

            modelBuilder.Entity("SportsCenter.DataAccess.Entity.ProductsOrder", b =>
                {
                    b.Navigation("ProductsOrderDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
